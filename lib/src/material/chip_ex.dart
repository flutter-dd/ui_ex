part of ui_ex;

/// 材料芯片
/// Chip
extension MaterialChipEx<T extends Widget?> on T {
  /// Chip
  Chip chip({
    Key? key,
    Widget? avatar,
    required Widget label,
    TextStyle? labelStyle,
    EdgeInsetsGeometry? labelPadding,
    Widget? deleteIcon,
    void Function()? onDeleted,
    Color? deleteIconColor,
    bool useDeleteButtonTooltip = true,
    String? deleteButtonTooltipMessage,
    BorderSide? side,
    OutlinedBorder? shape,
    Clip clipBehavior = Clip.none,
    FocusNode? focusNode,
    bool autofocus = false,
    Color? backgroundColor,
    EdgeInsetsGeometry? padding,
    VisualDensity? visualDensity,
    MaterialTapTargetSize? materialTapTargetSize,
    double? elevation,
    Color? shadowColor,
  }) =>
      Chip(
        key: key,
        avatar: avatar,
        label: this ?? Container(),
        labelStyle: labelStyle,
        labelPadding: labelPadding,
        deleteIcon: deleteIcon,
        onDeleted: onDeleted,
        deleteIconColor: deleteIconColor,
        // ignore: deprecated_member_use
        useDeleteButtonTooltip: useDeleteButtonTooltip,
        deleteButtonTooltipMessage: deleteButtonTooltipMessage,
        side: side,
        shape: shape,
        clipBehavior: clipBehavior,
        focusNode: focusNode,
        autofocus: autofocus,
        backgroundColor: backgroundColor,
        padding: padding,
        visualDensity: visualDensity,
        materialTapTargetSize: materialTapTargetSize,
        elevation: elevation,
        shadowColor: shadowColor,
      );
}

extension MaterialInputChipEx<T extends Widget?> on T {
  /// InputChip
  InputChip inputChip({
    Key? key,
    Widget? avatar,
    required Widget label,
    TextStyle? labelStyle,
    EdgeInsetsGeometry? labelPadding,
    bool selected = false,
    bool isEnabled = true,
    void Function(bool)? onSelected,
    Widget? deleteIcon,
    void Function()? onDeleted,
    Color? deleteIconColor,
    bool useDeleteButtonTooltip = true,
    String? deleteButtonTooltipMessage,
    void Function()? onPressed,
    double? pressElevation,
    Color? disabledColor,
    Color? selectedColor,
    String? tooltip,
    BorderSide? side,
    OutlinedBorder? shape,
    Clip clipBehavior = Clip.none,
    FocusNode? focusNode,
    bool autofocus = false,
    Color? backgroundColor,
    EdgeInsetsGeometry? padding,
    VisualDensity? visualDensity,
    MaterialTapTargetSize? materialTapTargetSize,
    double? elevation,
    Color? shadowColor,
    Color? selectedShadowColor,
    bool? showCheckmark,
    Color? checkmarkColor,
    ShapeBorder avatarBorder = const CircleBorder(),
  }) =>
      InputChip(
        label: this ?? Container(),
        key: key,
        avatar: avatar,
        labelStyle: labelStyle,
        labelPadding: labelPadding,
        selected: selected,
        isEnabled: isEnabled,
        onSelected: onSelected,
        deleteIcon: deleteIcon,
        onDeleted: onDeleted,
        deleteIconColor: deleteIconColor,
        // ignore: deprecated_member_use
        useDeleteButtonTooltip: useDeleteButtonTooltip,
        deleteButtonTooltipMessage: deleteButtonTooltipMessage,
        onPressed: onPressed,
        pressElevation: pressElevation,
        disabledColor: disabledColor,
        selectedColor: selectedColor,
        tooltip: tooltip,
        side: side,
        shape: shape,
        clipBehavior: clipBehavior,
        focusNode: focusNode,
        autofocus: autofocus,
        backgroundColor: backgroundColor,
        padding: padding,
        visualDensity: visualDensity,
        materialTapTargetSize: materialTapTargetSize,
        elevation: elevation,
        shadowColor: shadowColor,
        selectedShadowColor: selectedShadowColor,
        showCheckmark: showCheckmark,
        checkmarkColor: checkmarkColor,
        avatarBorder: avatarBorder,
      );
}

extension MaterialChoiceChipEx<T extends Widget?> on T {
  /// ChoiceChip
  ChoiceChip choiceChip({
    Key? key,
    Widget? avatar,
    required Widget label,
    TextStyle? labelStyle,
    EdgeInsetsGeometry? labelPadding,
    void Function(bool)? onSelected,
    double? pressElevation,
    required bool selected,
    Color? selectedColor,
    Color? disabledColor,
    String? tooltip,
    BorderSide? side,
    OutlinedBorder? shape,
    Clip clipBehavior = Clip.none,
    FocusNode? focusNode,
    bool autofocus = false,
    Color? backgroundColor,
    EdgeInsetsGeometry? padding,
    VisualDensity? visualDensity,
    MaterialTapTargetSize? materialTapTargetSize,
    double? elevation,
    Color? shadowColor,
    Color? selectedShadowColor,
    ShapeBorder avatarBorder = const CircleBorder(),
  }) =>
      ChoiceChip(
        label: this ?? Container(),
        key: key,
        avatar: avatar,
        labelStyle: labelStyle,
        labelPadding: labelPadding,
        onSelected: onSelected,
        pressElevation: pressElevation,
        selected: selected,
        selectedColor: selectedColor,
        disabledColor: disabledColor,
        tooltip: tooltip,
        side: side,
        shape: shape,
        clipBehavior: clipBehavior,
        focusNode: focusNode,
        autofocus: autofocus,
        backgroundColor: backgroundColor,
        padding: padding,
        visualDensity: visualDensity,
        materialTapTargetSize: materialTapTargetSize,
        elevation: elevation,
        shadowColor: shadowColor,
        selectedShadowColor: selectedShadowColor,
        avatarBorder: avatarBorder,
      );
}

extension MaterialFilterChipEx<T extends Widget?> on T {
  /// FilterChip
  FilterChip filterChip({
    Key? key,
    Widget? avatar,
    TextStyle? labelStyle,
    EdgeInsetsGeometry? labelPadding,
    bool selected = false,
    required void Function(bool)? onSelected,
    double? pressElevation,
    Color? disabledColor,
    Color? selectedColor,
    String? tooltip,
    BorderSide? side,
    OutlinedBorder? shape,
    Clip clipBehavior = Clip.none,
    FocusNode? focusNode,
    bool autofocus = false,
    Color? backgroundColor,
    EdgeInsetsGeometry? padding,
    VisualDensity? visualDensity,
    MaterialTapTargetSize? materialTapTargetSize,
    double? elevation,
    Color? shadowColor,
    Color? selectedShadowColor,
    bool? showCheckmark,
    Color? checkmarkColor,
    ShapeBorder avatarBorder = const CircleBorder(),
  }) =>
      FilterChip(
        label: this ?? Container(),
        key: key,
        avatar: avatar,
        labelStyle: labelStyle,
        labelPadding: labelPadding,
        selected: selected,
        onSelected: onSelected,
        pressElevation: pressElevation,
        disabledColor: disabledColor,
        selectedColor: selectedColor,
        tooltip: tooltip,
        side: side,
        shape: shape,
        clipBehavior: clipBehavior,
        focusNode: focusNode,
        autofocus: autofocus,
        backgroundColor: backgroundColor,
        padding: padding,
        visualDensity: visualDensity,
        materialTapTargetSize: materialTapTargetSize,
        elevation: elevation,
        shadowColor: shadowColor,
        selectedShadowColor: selectedShadowColor,
        showCheckmark: showCheckmark,
        checkmarkColor: checkmarkColor,
        avatarBorder: avatarBorder,
      );
}

extension MaterialActionChipEx<T extends Widget?> on T {
  /// ActionChip
  ActionChip actionChip({
    Key? key,
    Widget? avatar,
    TextStyle? labelStyle,
    EdgeInsetsGeometry? labelPadding,
    required void Function() onPressed,
    double? pressElevation,
    String? tooltip,
    BorderSide? side,
    OutlinedBorder? shape,
    Clip clipBehavior = Clip.none,
    FocusNode? focusNode,
    bool autofocus = false,
    Color? backgroundColor,
    EdgeInsetsGeometry? padding,
    VisualDensity? visualDensity,
    MaterialTapTargetSize? materialTapTargetSize,
    double? elevation,
    Color? shadowColor,
  }) =>
      ActionChip(
        key: key,
        avatar: avatar,
        label: this ?? Container(),
        labelStyle: labelStyle,
        labelPadding: labelPadding,
        onPressed: onPressed,
        pressElevation: pressElevation,
        tooltip: tooltip,
        side: side,
        shape: shape,
        clipBehavior: clipBehavior,
        focusNode: focusNode,
        autofocus: autofocus,
        backgroundColor: backgroundColor,
        padding: padding,
        visualDensity: visualDensity,
        materialTapTargetSize: materialTapTargetSize,
        elevation: elevation,
        shadowColor: shadowColor,
      );
}

extension MaterialRawChipEx<T extends Widget?> on T {
  /// RawChip
  RawChip rawChip({
    Key? key,
    Widget? avatar,
    required Widget label,
    TextStyle? labelStyle,
    EdgeInsetsGeometry? padding,
    VisualDensity? visualDensity,
    EdgeInsetsGeometry? labelPadding,
    Widget? deleteIcon,
    void Function()? onDeleted,
    Color? deleteIconColor,
    bool useDeleteButtonTooltip = true,
    String? deleteButtonTooltipMessage,
    void Function()? onPressed,
    void Function(bool)? onSelected,
    double? pressElevation,
    bool tapEnabled = true,
    bool selected = false,
    bool isEnabled = true,
    Color? disabledColor,
    Color? selectedColor,
    String? tooltip,
    BorderSide? side,
    OutlinedBorder? shape,
    Clip clipBehavior = Clip.none,
    FocusNode? focusNode,
    bool autofocus = false,
    Color? backgroundColor,
    MaterialTapTargetSize? materialTapTargetSize,
    double? elevation,
    Color? shadowColor,
    Color? selectedShadowColor,
    bool? showCheckmark = true,
    Color? checkmarkColor,
    ShapeBorder avatarBorder = const CircleBorder(),
  }) =>
      RawChip(
        key: key,
        avatar: avatar,
        label: this ?? Container(),
        labelStyle: labelStyle,
        padding: padding,
        visualDensity: visualDensity,
        labelPadding: labelPadding,
        deleteIcon: deleteIcon,
        onDeleted: onDeleted,
        deleteIconColor: deleteIconColor,
        // ignore: deprecated_member_use
        useDeleteButtonTooltip: useDeleteButtonTooltip,
        deleteButtonTooltipMessage: deleteButtonTooltipMessage,
        onPressed: onPressed,
        onSelected: onSelected,
        pressElevation: pressElevation,
        tapEnabled: tapEnabled,
        selected: selected,
        isEnabled: isEnabled,
        disabledColor: disabledColor,
        selectedColor: selectedColor,
        tooltip: tooltip,
        side: side,
        shape: shape,
        clipBehavior: clipBehavior,
        focusNode: focusNode,
        autofocus: autofocus,
        backgroundColor: backgroundColor,
        materialTapTargetSize: materialTapTargetSize,
        elevation: elevation,
        shadowColor: shadowColor,
        selectedShadowColor: selectedShadowColor,
        showCheckmark: showCheckmark,
        checkmarkColor: checkmarkColor,
        avatarBorder: avatarBorder,
      );
}
