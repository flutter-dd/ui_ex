part of ui_ex;

/// 渲染动画大小
/// Editable
extension RenderingEditableEx<T extends Offset?> on T {
  /// TextSelectionPoint
  TextSelectionPoint textSelectionPoint(TextDirection? direction) =>
      TextSelectionPoint(this ?? Offset.zero, direction);
}

extension RenderingRenderEditableEx<T extends RenderBox> on List<T>? {
  /// RenderEditable
  RenderEditable renderEditable({
    InlineSpan? text,
    required TextDirection textDirection,
    TextAlign textAlign = TextAlign.start,
    Color? cursorColor,
    Color? backgroundCursorColor,
    ValueNotifier<bool>? showCursor,
    bool? hasFocus,
    required LayerLink startHandleLayerLink,
    required LayerLink endHandleLayerLink,
    int? maxLines = 1,
    int? minLines,
    bool expands = false,
    StrutStyle? strutStyle,
    Color? selectionColor,
    double textScaleFactor = 1.0,
    TextSelection? selection,
    required ViewportOffset offset,
    // void Function(TextSelection, RenderEditable, SelectionChangedCause)?
    //     onSelectionChanged,
    void Function(Rect)? onCaretChanged,
    bool ignorePointer = false,
    bool readOnly = false,
    bool forceLine = true,
    TextHeightBehavior? textHeightBehavior,
    TextWidthBasis textWidthBasis = TextWidthBasis.parent,
    String obscuringCharacter = '•',
    bool obscureText = false,
    Locale? locale,
    double cursorWidth = 1.0,
    double? cursorHeight,
    Radius? cursorRadius,
    bool paintCursorAboveText = false,
    Offset cursorOffset = Offset.zero,
    double devicePixelRatio = 1.0,
    BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight,
    BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight,
    bool? enableInteractiveSelection,
    EdgeInsets floatingCursorAddedMargin =
        const EdgeInsets.fromLTRB(4, 4, 4, 5),
    TextRange? promptRectRange,
    Color? promptRectColor,
    Clip clipBehavior = Clip.hardEdge,
    required TextSelectionDelegate textSelectionDelegate,
    RenderEditablePainter? painter,
    RenderEditablePainter? foregroundPainter,
  }) =>
      RenderEditable(
        text: text,
        textDirection: textDirection,
        textAlign: textAlign,
        cursorColor: cursorColor,
        backgroundCursorColor: backgroundCursorColor,
        showCursor: showCursor,
        hasFocus: hasFocus,
        startHandleLayerLink: startHandleLayerLink,
        endHandleLayerLink: endHandleLayerLink,
        maxLines: maxLines,
        minLines: minLines,
        expands: expands,
        strutStyle: strutStyle,
        selectionColor: selectionColor,
        textScaleFactor: textScaleFactor,
        selection: selection,
        offset: offset,
        // onSelectionChanged: onSelectionChanged,
        onCaretChanged: onCaretChanged,
        ignorePointer: ignorePointer,
        readOnly: readOnly,
        forceLine: forceLine,
        textHeightBehavior: textHeightBehavior,
        textWidthBasis: textWidthBasis,
        obscuringCharacter: obscuringCharacter,
        obscureText: obscureText,
        locale: locale,
        cursorWidth: cursorWidth,
        cursorHeight: cursorHeight,
        cursorRadius: cursorRadius,
        paintCursorAboveText: paintCursorAboveText,
        cursorOffset: cursorOffset,
        devicePixelRatio: devicePixelRatio,
        selectionHeightStyle: selectionHeightStyle,
        selectionWidthStyle: selectionWidthStyle,
        enableInteractiveSelection: enableInteractiveSelection,
        floatingCursorAddedMargin: floatingCursorAddedMargin,
        promptRectRange: promptRectRange,
        promptRectColor: promptRectColor,
        clipBehavior: clipBehavior,
        textSelectionDelegate: textSelectionDelegate,
        painter: painter,
        foregroundPainter: foregroundPainter,
        children: this ?? [],
      );
}
